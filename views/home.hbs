<canvas id="head" class="h-100 w-100" style="position: absolute;top: 0px;z-index: 0;mix-blend-mode: multiply"></canvas>

<div class="container-fluid h-100 w-100 p-0 m-0" style="z-index: 0;       background: #e4425c;">
    <div class="row h-100 w-100 justify-content-center align-items-center" style="z-index: 5">
        <div class="col-xl-8 p-5 m-5">
            <h1 class=" fn1 " style="color: white;" >Hey,
                <br>I am <span class="">Tanmay.</span></h1>
        </div>
    </div>
</div>

<style>
    body{
        width: 100%;
        height: 100%;
        padding: 0;
        background-color: #cb3a52;
    }
    html{
        width: 100%;
        height: 100%;
        overflow-x: hidden;
    }
</style>



<script src="/js/shaders/CopyShader.js"></script>
<script src="/js/shaders/DotScreenShader.js"></script>
<script src="/js/shaders/RGBShiftShader.js"></script>

<script src="/js/postprocessing/EffectComposer.js"></script>
<script src="/js/postprocessing/RenderPass.js"></script>
<script src="/js/postprocessing/ShaderPass.js"></script>


<script>
    var mouseX = 0,
            mouseY = 0,
            windowHalfX = window.innerWidth / 2,
            windowHalfY = window.innerHeight / 2;
    var camera, scene, renderer, composer;
    var object, light;
    init();
    animate();
    function init() {
        renderer = new THREE.WebGLRenderer({canvas:document.getElementById('head'),alpha:true});
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight  );
//        renderer.setClearColor(0x000000, 0.0);
        document.body.appendChild( renderer.domElement );
        //
        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight , 1, 1000 );
        camera.position.z = 400;
        scene = new THREE.Scene();
        scene.fog = new THREE.Fog( 0x000000, 1, 1000 );
        object = new THREE.Object3D();
        scene.add( object );

        var geometry = new THREE.CubeGeometry( 20,20,20);
        var material = new THREE.MeshLambertMaterial({ color: 0xffffff} );
        var material2 = new THREE.LineBasicMaterial({ color: 0x74747c,linewidth: 3} );
        for ( var i = 0; i < 5; i ++ ) {

            var mesh = new THREE.Mesh( geometry, material );

            mesh.position.set( Math.random()*(-50), Math.random()*(-50), 100 );

//            mesh.position.multiplyScalar( Math.random() * 20, Math.random() * 20, Math.random() * 1 );


            mesh.rotation.set( Math.random() * 10, Math.random() * 10, Math.random() * 10 );
//            mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 1 ;
            object.add( mesh );

        }
        object.position.set(windowHalfX/100,windowHalfY/100,200);
//        var light = new THREE.HemisphereLight(0xe95464,0xffb7b7,1);
        var light2 = new THREE.AmbientLight(0xffffff,0.95);
        var light = new THREE.PointLight(0xf5f5f5,0.1);
        var light3 = new THREE.DirectionalLight(0xf9f9f9,0.1);
        light.position.set(100,-100,100);


        scene.add(light);
        scene.add(light3);
        scene.add(light2);


        // postprocessing
        composer = new THREE.EffectComposer( renderer );
        composer.addPass( new THREE.RenderPass( scene, camera ) );
//        var effect = new THREE.ShaderPass( THREE.DotScreenShader );
//        effect.uniforms[ 'scale' ].value = 20;
//        composer.addPass( effect );
        var effect = new THREE.ShaderPass( THREE.RGBShiftShader );
        effect.uniforms[ 'amount' ].value = 0.00;
        effect.renderToScreen = true;
        composer.addPass( effect );
        //
        window.addEventListener( 'resize', onWindowResize, false );
//        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
//        document.addEventListener( 'touchstart', onDocumentTouchStart, false );
//        document.addEventListener( 'touchmove', onDocumentTouchMove, false );
    }

    function onDocumentMouseMove( event ) {
        mouseX = event.clientX - windowHalfX;
        mouseY = event.clientY - windowHalfY;
    }


    function onDocumentTouchStart( event ) {
        if ( event.touches.length > 1 ) {
            event.preventDefault();
            mouseX = event.touches[ 0 ].pageX - windowHalfX;
            mouseY = event.touches[ 0 ].pageY - windowHalfY;
        }
    }
    function onDocumentTouchMove( event ) {
        if ( event.touches.length == 1 ) {
            event.preventDefault();
            mouseX = event.touches[ 0 ].pageX - windowHalfX;
            mouseY = event.touches[ 0 ].pageY - windowHalfY;
        }
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize( window.innerWidth, window.innerHeight );
        composer.setSize( window.innerWidth, window.innerHeight );
    }
    function animate() {

        requestAnimationFrame( animate );
//        camera.position.x += ( -mouseX + camera.position.x ) * .0025000;
//        camera.position.y += ( - mouseY + 200 - camera.position.y ) * .00015;
        camera.lookAt( scene.position );
        for(var i = 0; i<5 ; i++){

            var mesh = object.children[i];
            oldx = mesh.rotation.x;
            oldy = mesh.rotation.y;
            oldz = mesh.rotation.z;

            mesh.rotation.set(oldx + (i+5)*0.001, oldy+ (i+5)*0.001,oldz )
        }
//        object.rotation.z -= 0.0055;
//        object.rotation.x += 0.005;

        composer.render();

    }
    function showModal() {
        $("#loginModal").modal().show();
        ga('send', {
            hitType: 'event',
            eventCategory: 'Form',
            eventAction: 'Locked',
            eventLabel: 'Locked_Form'
        });

    }
    function loginClick() {
        ga('send', {
            hitType: 'event',
            eventCategory: 'Login',
            eventAction: 'Form Button',
            eventLabel: '1st Step'
        });
    }

</script>