<style>
    html{
        height:100%;}
    canvas{
        background: #111;  /* fallback for old browsers */
        /*background: -webkit-linear-gradient(to right, #5B86E5, #36D1DC);  !* Chrome 10-25, Safari 5.1-6 *!*/
        /*background: linear-gradient(to right, #5B86E5, #36D1DC); !* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ *!*/
        /*}*/}
    .btn-w,.btn-w:focus{
        color: white!important;
        opacity: 0.6;
        border-color: rgba(220, 220, 220, 0.75);
        box-shadow: none;

    }
    body{
        padding: 0px;
    }
    .svg-body{
        min-height: 200px;
    }
    .l1 {
        -webkit-animation: rotation 2s infinite linear;
        stroke: #ff9341;
        stroke-width: px;

    }
    .l2 {
        -webkit-animation: rotation 5s infinite linear;stroke: #ff7054;
        stroke-width: px;
    }
    .l3 {
        -webkit-animation: rotation 3s infinite linear;
        stroke: #ff6970;
        stroke-width: px;
    } .l4 {
          -webkit-animation: rotation 4s infinite linear;
      }

    @-webkit-keyframes rotation {
        from {
            -webkit-transform: rotate(0deg);
        }
        to {
            -webkit-transform: rotate(359deg);
        }
    }
    .light-bt{
        border-color: white;
        color: white !important;
        border-width: 2px;
        box-shadow: 0px 0px 10px deepskyblue;
    }
</style>

<canvas id="myCanvas" style="position: relative;z-index: 999"></canvas>
{{#if user}}
    <div class="container h-100" style="position: relative;top:-100%;z-index:">
        <div class="row h-100 align-items-center">
            <div class="col mt-5">
                <div class="container mt-5">
                    <div class="row pt-5 justify-content-center">
                        <div class="col-md-4 mt-5 pt-5 text-center" style="z-index: 1000" >
                            <!--<form class="form-dark" action="/light/add" method="post" style="z-index: 1000">-->
                            <!--<div class="form-group mt-3">-->
                            <!--&lt;!&ndash;<label for="exampleFormControlInput1">Email address</label>&ndash;&gt;-->
                            <!--<input type="text" class="form-control" name="name"id="exampleFormControlInput1" placeholder="Enter your Name" required><br>-->
                            <!--<input type="text" class="form-control" name="loc"id="exampleFormControlInput1" placeholder="Enter your Location" required>-->
                            <!--</div>-->
                            <p class="lead f2 c-theme-1">{{user.name}} <br>
                                <small class=" f2 c-theme-1">from {{user.location}}</small></p>
                            <!--<a href="auth/facebook" class=" btn btn-outline-primary btn-w" style="z-index: 1000"><i class="fa fa-facebook-square"></i> Click to Light Up!</a>-->
                            <!--</form>form-->
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
{{/if}}
<div class="container h-100" style="position: relative;top:-100%;z-index:">
    <div class="row h-100 align-items-center">
        <div class="col mt-5">
            <div class="container mt-5">
                <div class="row pt-5 justify-content-center">
                    <div class="col-md-4 mt-5 pt-5 text-center" style="z-index: 1000" >
                        <!--<form class="form-dark" action="/light/add" method="post" style="z-index: 1000">-->
                        <!--<div class="form-group mt-3">-->
                        <!--&lt;!&ndash;<label for="exampleFormControlInput1">Email address</label>&ndash;&gt;-->
                        <!--<input type="text" class="form-control" name="name"id="exampleFormControlInput1" placeholder="Enter your Name" required><br>-->
                        <!--<input type="text" class="form-control" name="loc"id="exampleFormControlInput1" placeholder="Enter your Location" required>-->
                        <!--</div>-->
                        <p class="lead f2 c-theme-1">Light it up with {{userLight.creator.name}} from {{userLight.creator.location}}!</p>
                        <a href="auth/facebook" class=" btn btn-outline-primary btn-w" style="z-index: 1000"><i class="fa fa-facebook-square"></i> Click to Light Up!</a>
                        <!--</form>form-->
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
{{endif}}

<!--<a class="btn btn-outline-primary" href="/auth/facebook">Fb Login</a>-->
<script>
    var canvas = document.getElementById("myCanvas");
    var c = canvas.getContext('2d');

    var timer;
    var mouseX;
    var mouseY;

    canvas.height = window.innerHeight;
    canvas.width = window.innerWidth;

    var canvasWidth = canvas.width;
    var canvasHeight = canvas.height;

    var maxRadius = 35;

    canvas.onmousemove = function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
    };

    window.addEventListener('resize', function() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    function MainCircle(xC, yC, ra,str) {
        this.co = colorArray[Math.floor(Math.random()*5)];

        var sideCircleAr = [];

        for(var i = 1 ; i <= str ;i++){
            var nc = new Sparkles(xC,yC,ra,i);
            sideCircleAr.push(nc);
        }
        this.draw = function () {
            c.beginPath();
            c.arc(xC, yC, Math.abs(ra), 0, Math.PI * 2);
            c.fillStyle = this.co;
            c.fill();
//
//            c.font = "20px Quicksand";
//            c.fillStyle = "#FFFFFF";
//            c.fillText("You Are Here!",xC,yC+ra+40);
//            c.font = "14px Quicksand";
//            c.fillText("From New Delhi",xC,yC+ra+60);
        };
        this.update = function() {
            this.draw();

            for(var i = 1 ; i<=str ;i++){
//                var nc = new Sparkles(xCoordinate,yCoordinate,radius,i);
                sideCircleAr[i].update();
            }

        }
    }

    function Circle(xCoordinate, yCoordinate, radius,strength,name,location,link) {
        var randomNumber = Math.floor((Math.random() * 5));
        var randomTrueOrFalse = Math.floor(Math.random() * 2);
        var randomTrueOrFalseTwo = Math.floor(Math.random() * 2);

        this.xCoordinate = xCoordinate;
        this.yCoordinate = yCoordinate;


        var sideCircleArray = [];

        for(var i = 1 ; i<=strength ;i++){
            var nc = new Sparkles(xCoordinate,yCoordinate,radius,i);
            sideCircleArray.push(nc);
        }
        this.radius = radius;
        this.color = colorArray[randomNumber];

        if (randomTrueOrFalse == 1) {
            this.xVelocity = -Math.random() * 1;
        } else {
            this.xVelocity = Math.random() * 1;
        }

        if (randomTrueOrFalse == 1) {
            this.yVelocity = -Math.random() * 1;
        } else {
            this.yVelocity = Math.random() * 1;
        }

// As distance gets closer to 0, increase radius

        this.update = function() {
            this.xCoordinate += this.xVelocity;
            var xDistance = mouseX - this.xCoordinate;
            var yDistance = mouseY - this.yCoordinate;
            var originalRadius = radius;
            this.yCoordinate += this.yVelocity;
            var su = 0;

//             Movement Functions
            if (this.xCoordinate + this.radius > canvasWidth || this.xCoordinate - this.radius < 0) {
                this.xVelocity = -this.xVelocity;
            };
            if (this.yCoordinate + this.radius > canvasHeight || this.yCoordinate - this.radius < 0) {
                this.yVelocity = - this.yVelocity;
            };

            // Radius Decrease Functions
            // When distance between circle center and mouse on horizontal axis is less than 50, increase radius until it is equal to 35
            if (xDistance < 50 && xDistance > -50 && this.radius < maxRadius && yDistance < 50 && yDistance > -50) {
                this.radius += 2;
                su = 1;
            }
            else if ((xDistance >= 50 && originalRadius < this.radius) || (xDistance <= -50 && originalRadius < this.radius) || (yDistance >= 50 && originalRadius < this.radius) || (yDistance <= -50 && originalRadius < this.radius)) {
                this.radius -= 2;
                su = -1;
            };
            if(xDistance <50 && xDistance > -50 && yDistance < 50 && yDistance > -50){
                c.font = "20px Quicksand";
                c.fillStyle = "#FFFFFF";
                c.fillText(name,this.xCoordinate,this.yCoordinate+this.radius+40);
                c.font = "14px Quicksand";
                c.fillText("from "+location,this.xCoordinate,this.yCoordinate+this.radius+60);

            }
            this.draw();
            for(var i = 1 ; i<=strength-1 ;i++){

                sideCircleArray[i].update(this.xVelocity , this.yVelocity,su, this.xCoordinate, this.yCoordinate);
            }



        };



        this.draw = function() {
            c.beginPath();
            c.arc(this.xCoordinate, this.yCoordinate, Math.abs(this.radius), 0, Math.PI * 2);
            c.fillStyle = this.color;
            c.fill();
        }
    }

    function range(a, b) {
        return (b-a) * Math.random() + a;
    }

    function Sparkles(xc, yc, r, index, rad) {
        var self = this;
        var limit = r * 4;
        self.radius = range(1, 5);
        self.parX = xc;
        self.parY = yc;
        self.vX = range(-1.5, 1.5);
        self.vY = range(-1.5, 1.5);
        replace();
        this.co = colorArray[(Math.floor(Math.random()*5))];


        this.draw = function () {
            c.beginPath();
            c.arc(self.xCoordinate , self.yCoordinate ,self.radius, 0, Math.PI * 2);
            c.fillStyle = this.co;
            c.fill();
        };

        function getY(r, x) {
            return Math.sqrt(r * r - x * x);
        }

        function replace () {
            self.xCoordinate = self.parX + range(-limit + self.radius, limit - self.radius);
            var y = getY(limit, self.xCoordinate - self.parX);
            self.yCoordinate = self.parY + range(-y, y);
            self.vX = range(-2, 2);
            self.vY = range(-2, 2);
        }

        function sqr(a) {return a * a;}
        function gettingOut() {
            var x = self.xCoordinate,
                    y = self.yCoordinate,
                    xx = self.parX,
                    yy = self.parY;
            return sqr(xx-x) + sqr(yy-y) > sqr(limit);

        }

        this.update = function (nx, ny, su, xx, yy) {
            self.parX = xx;
            self.parY = yy;
            self.xCoordinate += nx + self.vX;
            self.yCoordinate += ny + self.vY;

            if(gettingOut()) replace();
            self.draw();
        }

    }
    var colorArray =["#092140","#024959","#F2C777","#F24738","#BF2A2A"];
    var myCircle = new MainCircle(canvasWidth/2,canvasHeight/2,50,{{userLight.strength}}-1);


    var circleArray = [];
    //    var az =

    var data = {{{Lights}}};
    for (var i = 0; i < {{al}}; i++) {
        var randomXCoordinate = Math.random() * canvasWidth ;
        var randomYCoordinate = Math.random() * canvasHeight ;
        var strength = Math.random() * 10;
        var randomRadius = strength + strength*25/100 + 5;
        console.log("Entered");
        circleArray.push(new Circle(randomXCoordinate,randomYCoordinate ,randomRadius,data[i].strength,data[i].creatorName,data[i].creatorLocation,data[i].id))
    }


    function updateAll() {
        c.clearRect(0,0, canvasWidth, canvasHeight);
        myCircle.update();



        for (var i = 0; i < circleArray.length; i++) {
            circleArray[i].update();
        }
        window.requestAnimationFrame(updateAll);
    }

    updateAll();
</script>
